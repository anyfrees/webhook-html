name: Build and Push Docker Image

on:
  push:
    branches:
      - main # 当 main 分支有推送时触发
    # 如果您想在打标签时触发，可以使用：
    # tags:
    #   - 'v*.*.*' # 例如 v1.0.0, v1.2.3

jobs:
  build-and-push:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu runner

    permissions:
      contents: read      # 需要读取仓库内容
      packages: write     # 需要写入 GitHub Packages (Container Registry)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 #检出您的代码

      - name: Set up QEMU # 可选，用于构建多平台镜像
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx # 设置 Buildx，这是 Docker 的下一代构建器
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # 使用触发工作流的用户的用户名
          password: ${{ secrets.GITHUB_TOKEN }} # 使用自动生成的 GITHUB_TOKEN

      # - name: Log in to Docker Hub (如果推送到 Docker Hub)
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/webhook-sender # 您的镜像名称
          # Docker Hub 示例: your-dockerhub-username/webhook-sender
          tags: |
            type=sha # 使用 Git SHA 作为标签
            type=raw,value=latest,enable={{is_default_branch}} # 如果是默认分支 (main), 也打上 latest 标签

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Dockerfile 的上下文路径 (项目根目录)
          file: ./Dockerfile # Dockerfile 的路径
          push: true # 构建成功后推送镜像
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha # 从 GitHub Actions 缓存中拉取
          cache-to: type=gha,mode=max # 推送到 GitHub Actions 缓存 (mode=max 意味着写入所有构建层)